"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateCliPropsForPlugins = void 0;
const devkit_1 = require("@nx/devkit");
const package_json_1 = require("nx/src/utils/package-json");
const path_1 = require("path");
function updateCliPropsForPlugins(tree) {
    const projects = (0, devkit_1.getProjects)(tree);
    for (const project of projects.values()) {
        if (tree.exists((0, devkit_1.joinPathFragments)(project.root, 'package.json'))) {
            const packageJson = (0, devkit_1.readJson)(tree, (0, devkit_1.joinPathFragments)(project.root, 'package.json'));
            const migrateConfig = (0, package_json_1.readNxMigrateConfig)(packageJson);
            if (migrateConfig.migrations) {
                const migrationsPath = (0, devkit_1.joinPathFragments)(project.root, migrateConfig.migrations);
                if (tree.exists(migrationsPath)) {
                    updateMigrationsJsonForPlugin(tree, migrationsPath);
                }
                else {
                    devkit_1.output.warn({
                        title: `Migrations file specified for ${packageJson.name} does not exist: ${migrationsPath}`,
                        bodyLines: [
                            'Please ensure that migrations that use the Angular Devkit are placed inside the `schematics` property, and migrations that use the Nx Devkit are placed inside the `generators` property.',
                        ],
                    });
                }
            }
            if (packageJson.generators) {
                const generatorsPath = (0, devkit_1.joinPathFragments)(project.root, packageJson.generators);
                if (tree.exists(generatorsPath)) {
                    removeCliFromGeneratorSchemaJsonFiles(tree, generatorsPath);
                }
                else {
                    devkit_1.output.warn({
                        title: `Generators file specified for ${packageJson.name} does not exist: ${generatorsPath}`,
                        bodyLines: [
                            "The `cli` property inside generator's `schema.json` files is no longer supported.",
                        ],
                    });
                }
            }
            if (packageJson.executors) {
                const executorsPath = (0, devkit_1.joinPathFragments)(project.root, packageJson.executors);
                if (tree.exists(executorsPath)) {
                    removeCliFromExecutorSchemaJsonFiles(tree, executorsPath);
                }
                else {
                    devkit_1.output.warn({
                        title: `Executors file specified for ${packageJson.name} does not exist: ${executorsPath}`,
                        bodyLines: [
                            "The `cli` property inside executor's `schema.json` files is no longer supported.",
                        ],
                    });
                }
            }
            if (packageJson.builders) {
                const buildersPath = (0, devkit_1.joinPathFragments)(project.root, packageJson.builders);
                if (tree.exists(buildersPath)) {
                    removeCliFromExecutorSchemaJsonFiles(tree, buildersPath);
                }
                else {
                    devkit_1.output.warn({
                        title: `Builders file specified for ${packageJson.name} does not exist: ${buildersPath}`,
                        bodyLines: [
                            "The `cli` property inside builder's `schema.json` files is no longer supported.",
                        ],
                    });
                }
            }
            if (packageJson.schematics) {
                const schematicsPath = (0, devkit_1.joinPathFragments)(project.root, packageJson.schematics);
                if (tree.exists(schematicsPath)) {
                    removeCliFromGeneratorSchemaJsonFiles(tree, schematicsPath);
                }
                else {
                    devkit_1.output.warn({
                        title: `Schematics file specified for ${packageJson.name} does not exist: ${schematicsPath}`,
                        bodyLines: [
                            "The `cli` property inside schematic's `schema.json` files is no longer supported.",
                        ],
                    });
                }
            }
        }
    }
}
exports.updateCliPropsForPlugins = updateCliPropsForPlugins;
function removeCliFromExecutorSchemaJsonFiles(tree, collectionPath) {
    var _a, _b;
    const collection = (0, devkit_1.readJson)(tree, collectionPath);
    for (const [name, entry] of Object.entries((_a = collection.executors) !== null && _a !== void 0 ? _a : {}).concat(Object.entries((_b = collection.builders) !== null && _b !== void 0 ? _b : {}))) {
        deleteCliPropFromSchemaFile(collectionPath, entry, tree);
    }
}
function removeCliFromGeneratorSchemaJsonFiles(tree, collectionPath) {
    var _a, _b;
    const collection = (0, devkit_1.readJson)(tree, collectionPath);
    for (const [name, entry] of Object.entries((_a = collection.generators) !== null && _a !== void 0 ? _a : {}).concat(Object.entries((_b = collection.schematics) !== null && _b !== void 0 ? _b : {}))) {
        deleteCliPropFromSchemaFile(collectionPath, entry, tree);
    }
}
function updateMigrationsJsonForPlugin(tree, collectionPath) {
    (0, devkit_1.updateJson)(tree, collectionPath, (json) => {
        var _a, _b, _c, _d;
        for (const migration in (_a = json.generators) !== null && _a !== void 0 ? _a : {}) {
            if (!(json.generators[migration].cli === 'nx')) {
                (_b = json.schematics) !== null && _b !== void 0 ? _b : (json.schematics = {});
                json.schematics[migration] = json.generators[migration];
                delete json.generators[migration];
            }
        }
        for (const migration in (_c = json.schematics) !== null && _c !== void 0 ? _c : {}) {
            if (json.schematics[migration].cli === 'nx') {
                (_d = json.generators) !== null && _d !== void 0 ? _d : (json.generators = {});
                json.generators[migration] = json.schematics[migration];
                delete json.schematics[migration];
            }
        }
        return json;
    });
}
exports.default = updateCliPropsForPlugins;
function deleteCliPropFromSchemaFile(collectionPath, entry, tree) {
    if (!entry.schema) {
        return;
    }
    const schemaPath = (0, devkit_1.joinPathFragments)((0, path_1.dirname)(collectionPath), entry.schema);
    if (tree.exists(schemaPath)) {
        (0, devkit_1.updateJson)(tree, schemaPath, (json) => {
            if (json.cli) {
                delete json.cli;
            }
            return json;
        });
    }
    else {
        console.warn(`Could not find schema file ${schemaPath}`);
    }
}
