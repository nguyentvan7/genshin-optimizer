"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pluginSchematic = exports.pluginGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const js_1 = require("@nx/js");
const add_swc_dependencies_1 = require("@nx/js/src/utils/swc/add-swc-dependencies");
const linter_1 = require("@nx/linter");
const path = require("path");
const e2e_1 = require("../e2e-project/e2e");
const generator_1 = require("../lint-checks/generator");
const normalize_schema_1 = require("./utils/normalize-schema");
const add_tslib_dependencies_1 = require("@nx/js/src/utils/typescript/add-tslib-dependencies");
const add_swc_dependencies_2 = require("@nx/js/src/utils/swc/add-swc-dependencies");
const nxVersion = require('../../../package.json').version;
function addFiles(host, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        host.delete((0, devkit_1.normalizePath)(`${options.projectRoot}/src/lib`));
        (0, devkit_1.generateFiles)(host, path.join(__dirname, './files/plugin'), options.projectRoot, Object.assign(Object.assign({}, options), { tmpl: '' }));
    });
}
function updatePluginConfig(host, options) {
    var _a;
    var _b;
    const project = (0, devkit_1.readProjectConfiguration)(host, options.name);
    if (project.targets.build) {
        (_a = (_b = project.targets.build.options).assets) !== null && _a !== void 0 ? _a : (_b.assets = []);
        const root = options.projectRoot === '.' ? '.' : './' + options.projectRoot;
        project.targets.build.options.assets = [
            ...project.targets.build.options.assets,
            {
                input: `${root}/src`,
                glob: '**/!(*.ts)',
                output: './src',
            },
            {
                input: `${root}/src`,
                glob: '**/*.d.ts',
                output: './src',
            },
            {
                input: root,
                glob: 'generators.json',
                output: '.',
            },
            {
                input: root,
                glob: 'executors.json',
                output: '.',
            },
        ];
        (0, devkit_1.updateProjectConfiguration)(host, options.name, project);
    }
}
function pluginGenerator(host, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const options = (0, normalize_schema_1.normalizeOptions)(host, schema);
        const tasks = [];
        tasks.push(yield (0, js_1.libraryGenerator)(host, Object.assign(Object.assign({}, schema), { config: 'project', bundler: options.bundler, publishable: options.publishable, importPath: options.npmPackageName, skipFormat: true })));
        if (options.bundler === 'tsc') {
            tasks.push((0, add_tslib_dependencies_1.addTsLibDependencies)(host));
        }
        tasks.push((0, devkit_1.addDependenciesToPackageJson)(host, {
            '@nx/devkit': nxVersion,
        }, {
            '@nx/jest': nxVersion,
            '@nx/js': nxVersion,
            '@nx/plugin': nxVersion,
        }));
        // Ensures Swc Deps are installed to handle running
        // local plugin generators and executors
        tasks.push((0, add_swc_dependencies_1.addSwcDependencies)(host));
        tasks.push((0, add_swc_dependencies_2.addSwcRegisterDependencies)(host));
        yield addFiles(host, options);
        updatePluginConfig(host, options);
        if (options.e2eTestRunner !== 'none') {
            tasks.push(yield (0, e2e_1.e2eProjectGenerator)(host, {
                pluginName: options.name,
                projectDirectory: options.projectDirectory,
                pluginOutputPath: `dist/${options.libsDir}/${options.projectDirectory}`,
                npmPackageName: options.npmPackageName,
                skipFormat: true,
                rootProject: options.rootProject,
            }));
        }
        if (options.linter === linter_1.Linter.EsLint && !options.skipLintChecks) {
            yield (0, generator_1.default)(host, { projectName: options.name });
        }
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(host);
        }
        return (0, devkit_1.runTasksInSerial)(...tasks);
    });
}
exports.pluginGenerator = pluginGenerator;
exports.default = pluginGenerator;
exports.pluginSchematic = (0, devkit_1.convertNxGenerator)(pluginGenerator);
