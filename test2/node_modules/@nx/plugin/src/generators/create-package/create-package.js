"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPackageSchematic = exports.createPackageGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const js_1 = require("@nx/js");
const versions_1 = require("nx/src/utils/versions");
const generator_1 = require("../generator/generator");
const normalize_schema_1 = require("./utils/normalize-schema");
const has_generator_1 = require("../../utils/has-generator");
const path_1 = require("path");
function createPackageGenerator(host, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const tasks = [];
        const options = (0, normalize_schema_1.normalizeSchema)(host, schema);
        const pluginPackageName = yield addPresetGenerator(host, options);
        const installTask = (0, devkit_1.addDependenciesToPackageJson)(host, {
            'create-nx-workspace': versions_1.nxVersion,
        }, {});
        tasks.push(installTask);
        yield createCliPackage(host, options, pluginPackageName);
        if (options.e2eProject) {
            addE2eProject(host, options);
        }
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(host);
        }
        return (0, devkit_1.runTasksInSerial)(...tasks);
    });
}
exports.createPackageGenerator = createPackageGenerator;
/**
 * Add a preset generator to the plugin if it doesn't exist
 * @param host
 * @param schema
 * @returns package name of the plugin
 */
function addPresetGenerator(host, schema) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { root: projectRoot } = (0, devkit_1.readProjectConfiguration)(host, schema.project);
        if (!(0, has_generator_1.hasGenerator)(host, schema.project, 'preset')) {
            yield (0, generator_1.default)(host, {
                name: 'preset',
                project: schema.project,
                unitTestRunner: schema.unitTestRunner,
                skipFormat: true,
            });
        }
        return (_a = (0, devkit_1.readJson)(host, (0, devkit_1.joinPathFragments)(projectRoot, 'package.json'))) === null || _a === void 0 ? void 0 : _a.name;
    });
}
function createCliPackage(host, options, pluginPackageName) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        yield (0, js_1.libraryGenerator)(host, Object.assign(Object.assign({}, options), { rootProject: false, config: 'project', publishable: true, bundler: options.bundler, importPath: options.name, skipFormat: true, skipTsConfig: true }));
        host.delete((0, devkit_1.joinPathFragments)(options.projectRoot, 'src'));
        // Add the bin entry to the package.json
        (0, devkit_1.updateJson)(host, (0, devkit_1.joinPathFragments)(options.projectRoot, 'package.json'), (packageJson) => {
            packageJson.bin = {
                [options.name]: './bin/index.js',
            };
            packageJson.dependencies = {
                'create-nx-workspace': versions_1.nxVersion,
            };
            return packageJson;
        });
        // update project build target to use the bin entry
        const projectConfiguration = (0, devkit_1.readProjectConfiguration)(host, options.projectName);
        projectConfiguration.sourceRoot = (0, devkit_1.joinPathFragments)(options.projectRoot, 'bin');
        projectConfiguration.targets.build.options.main = (0, devkit_1.joinPathFragments)(options.projectRoot, 'bin/index.ts');
        projectConfiguration.targets.build.options.updateBuildableProjectDepsInPackageJson =
            false;
        projectConfiguration.implicitDependencies = [options.project];
        (0, devkit_1.updateProjectConfiguration)(host, options.projectName, projectConfiguration);
        // Add bin files to tsconfg.lib.json
        (0, devkit_1.updateJson)(host, (0, devkit_1.joinPathFragments)(options.projectRoot, 'tsconfig.lib.json'), (tsConfig) => {
            tsConfig.include.push('bin/**/*.ts');
            return tsConfig;
        });
        (0, devkit_1.generateFiles)(host, (0, devkit_1.joinPathFragments)(__dirname, './files/create-framework-package'), options.projectRoot, Object.assign(Object.assign({}, options), { preset: pluginPackageName, tmpl: '' }));
    });
}
/**
 * Add a test file to plugin e2e project
 * @param host
 * @param options
 * @returns
 */
function addE2eProject(host, options) {
    const e2eProjectConfiguration = (0, devkit_1.readProjectConfiguration)(host, options.e2eProject);
    const projectConfiguration = (0, devkit_1.readProjectConfiguration)(host, options.project);
    const { name: pluginPackageName } = (0, devkit_1.readJson)(host, (0, path_1.join)(projectConfiguration.root, 'package.json'));
    (0, devkit_1.generateFiles)(host, (0, devkit_1.joinPathFragments)(__dirname, './files/e2e'), e2eProjectConfiguration.sourceRoot, {
        pluginName: options.project,
        cliName: options.name,
        packageManagerCommands: (0, devkit_1.getPackageManagerCommand)('npm'),
        pluginPackageName,
        tmpl: '',
    });
}
exports.default = createPackageGenerator;
exports.createPackageSchematic = (0, devkit_1.convertNxGenerator)(createPackageGenerator);
