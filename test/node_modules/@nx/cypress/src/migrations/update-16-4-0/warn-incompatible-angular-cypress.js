"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const executor_options_utils_1 = require("@nx/devkit/src/generators/executor-options-utils");
const package_json_1 = require("nx/src/utils/package-json");
const semver_1 = require("semver");
function default_1(tree) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const angularVersion = getInstalledAngularVersion();
        if (!angularVersion || (0, semver_1.lt)(angularVersion, '16.1.0')) {
            return;
        }
        const angularProjects = yield getAngularProjects();
        if (!angularProjects.length) {
            return;
        }
        let skipChecking = false;
        (0, executor_options_utils_1.forEachExecutorOptions)(tree, '@nx/cypress:cypress', (options, projectName) => {
            if (skipChecking || !angularProjects.includes(projectName)) {
                return;
            }
            if (options.testingType === 'component') {
                skipChecking = true;
                devkit_1.logger.warn((0, devkit_1.stripIndents) `Some of your Angular projects are setup for Cypress Component testing.
          The current version of Cypress does not support component testing for Angular 16.1 so your tests may fail.
          If your component tests fail, here are some recommended next steps:
          
          - Revert these changes and update Nx without updating Angular ("nx migrate latest --interactive"). You can update Angular once the issue has been resolved
          - Keep these changes but temporarily disable the component tests until this issue is resolved
          
          Check https://github.com/nrwl/nx/issues/17720 for more details.

          `);
            }
        });
    });
}
exports.default = default_1;
function getAngularProjects() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const projectGraph = yield (0, devkit_1.createProjectGraphAsync)();
        return Object.entries(projectGraph.dependencies)
            .filter(([node, dep]) => dep.some(({ target }) => { var _a; return !((_a = projectGraph.externalNodes) === null || _a === void 0 ? void 0 : _a[node]) && target === 'npm:@angular/core'; }))
            .map(([projectName]) => projectName);
    });
}
function getInstalledAngularVersion() {
    try {
        const { packageJson: { version }, } = (0, package_json_1.readModulePackageJson)('@angular/core');
        return version;
    }
    catch (_a) {
        return null;
    }
}
