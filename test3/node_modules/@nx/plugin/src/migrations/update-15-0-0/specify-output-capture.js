"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
function update(tree) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        for (const [project, { root }] of (0, devkit_1.getProjects)(tree)) {
            const packageJsonPath = (0, devkit_1.joinPathFragments)(root, 'package.json');
            if (!tree.exists(packageJsonPath)) {
                continue;
            }
            const packageJson = (0, devkit_1.readJson)(tree, packageJsonPath);
            if (!packageJson.executors && !packageJson.builders) {
                continue;
            }
            const paths = [packageJson.executors, packageJson.builders].filter(Boolean);
            for (const collectionPathSegment of paths) {
                const collectionPath = (0, devkit_1.joinPathFragments)(root, collectionPathSegment);
                if (!tree.exists(collectionPath)) {
                    continue;
                }
                const collectionFile = (0, devkit_1.readJson)(tree, collectionPath);
                const collections = [
                    collectionFile.builders,
                    collectionFile.executors,
                ].filter(Boolean);
                for (const collection of collections) {
                    if (!collection) {
                        continue;
                    }
                    for (const entry of Object.values(collection)) {
                        const schemaPath = (0, devkit_1.joinPathFragments)(root, entry.schema);
                        if (tree.exists(schemaPath)) {
                            (0, devkit_1.updateJson)(tree, schemaPath, (json) => {
                                if (json.version) {
                                    return json;
                                }
                                else {
                                    const newProperties = {
                                        version: 2,
                                    };
                                    if (!json.outputCapture) {
                                        newProperties.outputCapture = 'direct-nodejs';
                                    }
                                    return Object.assign(Object.assign({}, newProperties), json);
                                }
                            });
                        }
                    }
                }
            }
        }
        yield (0, devkit_1.formatFiles)(tree);
    });
}
exports.default = update;
