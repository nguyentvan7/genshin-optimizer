"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeOptions = void 0;
const devkit_1 = require("@nx/devkit");
const get_import_path_1 = require("@nx/js/src/utils/get-import-path");
function normalizeOptions(host, options) {
    var _a, _b;
    const { layoutDirectory, projectDirectory } = (0, devkit_1.extractLayoutDirectory)(options.directory);
    const { libsDir: defaultLibsDir } = (0, devkit_1.getWorkspaceLayout)(host);
    const libsDir = layoutDirectory !== null && layoutDirectory !== void 0 ? layoutDirectory : defaultLibsDir;
    const name = (0, devkit_1.names)(options.name).fileName;
    const fullProjectDirectory = projectDirectory
        ? `${(0, devkit_1.names)(projectDirectory).fileName}/${name}`
        : options.rootProject
            ? '.'
            : name;
    const projectName = options.rootProject
        ? name
        : fullProjectDirectory.replace(new RegExp('/', 'g'), '-');
    const fileName = projectName;
    const projectRoot = options.rootProject
        ? fullProjectDirectory
        : (0, devkit_1.joinPathFragments)(libsDir, fullProjectDirectory);
    const parsedTags = options.tags
        ? options.tags.split(',').map((s) => s.trim())
        : [];
    const npmPackageName = options.importPath || (0, get_import_path_1.getImportPath)(host, name);
    return Object.assign(Object.assign({}, options), { bundler: (_a = options.compiler) !== null && _a !== void 0 ? _a : 'tsc', fileName,
        libsDir, name: projectName, projectRoot, projectDirectory: fullProjectDirectory, parsedTags,
        npmPackageName, publishable: (_b = options.publishable) !== null && _b !== void 0 ? _b : false });
}
exports.normalizeOptions = normalizeOptions;
