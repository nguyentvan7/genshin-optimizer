"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const linter_1 = require("@nx/linter");
const plugin_1 = require("../plugin/plugin");
const create_package_1 = require("../create-package/create-package");
function default_1(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const tasks = [];
        const pluginTask = yield (0, plugin_1.pluginGenerator)(tree, {
            compiler: 'tsc',
            linter: linter_1.Linter.EsLint,
            name: options.pluginName.includes('/')
                ? options.pluginName.split('/')[1]
                : options.pluginName,
            skipFormat: true,
            unitTestRunner: 'jest',
            importPath: options.pluginName,
            rootProject: true,
            e2eTestRunner: 'jest',
            publishable: true,
        });
        tasks.push(pluginTask);
        removeNpmScope(tree);
        moveNxPluginToDevDeps(tree);
        if (options.createPackageName) {
            const cliTask = yield (0, create_package_1.default)(tree, {
                name: options.createPackageName,
                e2eProject: 'e2e',
                project: options.pluginName,
                skipFormat: true,
                unitTestRunner: 'jest',
                linter: linter_1.Linter.EsLint,
                compiler: 'tsc',
            });
            tasks.push(cliTask);
        }
        yield (0, devkit_1.formatFiles)(tree);
        return (0, devkit_1.runTasksInSerial)(...tasks);
    });
}
exports.default = default_1;
function removeNpmScope(tree) {
    (0, devkit_1.updateNxJson)(tree, Object.assign(Object.assign({}, (0, devkit_1.readNxJson)(tree)), { npmScope: undefined }));
}
function moveNxPluginToDevDeps(tree) {
    (0, devkit_1.updateJson)(tree, 'package.json', (json) => {
        const nxPluginEntry = json.dependencies['@nx/plugin'];
        delete json.dependencies['@nx/plugin'];
        json.devDependencies['@nx/plugin'] = nxPluginEntry;
        return json;
    });
}
