"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.e2eProjectSchematic = exports.e2eProjectGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const jest_1 = require("@nx/jest");
const js_1 = require("@nx/js");
const generator_1 = require("@nx/js/src/generators/setup-verdaccio/generator");
const add_local_registry_scripts_1 = require("@nx/js/src/utils/add-local-registry-scripts");
const path_1 = require("path");
const linter_1 = require("@nx/linter");
function normalizeOptions(host, options) {
    var _a;
    const { layoutDirectory, projectDirectory } = (0, devkit_1.extractLayoutDirectory)(options.projectDirectory);
    const { appsDir: defaultAppsDir } = (0, devkit_1.getWorkspaceLayout)(host);
    const appsDir = layoutDirectory !== null && layoutDirectory !== void 0 ? layoutDirectory : defaultAppsDir;
    const projectName = options.rootProject ? 'e2e' : `${options.pluginName}-e2e`;
    const projectRoot = projectDirectory && !options.rootProject
        ? (0, devkit_1.joinPathFragments)(appsDir, `${projectDirectory}-e2e`)
        : options.rootProject
            ? projectName
            : (0, devkit_1.joinPathFragments)(appsDir, projectName);
    const pluginPropertyName = (0, devkit_1.names)(options.pluginName).propertyName;
    return Object.assign(Object.assign({}, options), { projectName, linter: (_a = options.linter) !== null && _a !== void 0 ? _a : linter_1.Linter.EsLint, pluginPropertyName,
        projectRoot });
}
function validatePlugin(host, pluginName) {
    try {
        (0, devkit_1.readProjectConfiguration)(host, pluginName);
    }
    catch (_a) {
        throw new Error(`Project name "${pluginName}" doesn't not exist.`);
    }
}
function addFiles(host, options) {
    const projectConfiguration = (0, devkit_1.readProjectConfiguration)(host, options.pluginName);
    const { name: pluginPackageName } = (0, devkit_1.readJson)(host, (0, path_1.join)(projectConfiguration.root, 'package.json'));
    (0, devkit_1.generateFiles)(host, (0, path_1.join)(__dirname, './files'), options.projectRoot, Object.assign(Object.assign({}, options), { tmpl: '', rootTsConfigPath: (0, js_1.getRelativePathToRootTsConfig)(host, options.projectRoot), packageManagerCommands: (0, devkit_1.getPackageManagerCommand)('npm'), pluginPackageName }));
}
function addJest(host, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        (0, devkit_1.addProjectConfiguration)(host, options.projectName, {
            root: options.projectRoot,
            projectType: 'application',
            sourceRoot: `${options.projectRoot}/tests`,
            targets: {},
            implicitDependencies: [options.pluginName],
        });
        const jestTask = yield (0, jest_1.jestProjectGenerator)(host, {
            project: options.projectName,
            setupFile: 'none',
            supportTsx: false,
            skipSerializers: true,
            skipFormat: true,
        });
        const { startLocalRegistryPath, stopLocalRegistryPath } = (0, add_local_registry_scripts_1.addLocalRegistryScripts)(host);
        (0, jest_1.addPropertyToJestConfig)(host, (0, path_1.join)(options.projectRoot, 'jest.config.ts'), 'globalSetup', (0, path_1.join)((0, devkit_1.offsetFromRoot)(options.projectRoot), startLocalRegistryPath));
        (0, jest_1.addPropertyToJestConfig)(host, (0, path_1.join)(options.projectRoot, 'jest.config.ts'), 'globalTeardown', (0, path_1.join)((0, devkit_1.offsetFromRoot)(options.projectRoot), stopLocalRegistryPath));
        const project = (0, devkit_1.readProjectConfiguration)(host, options.projectName);
        const testTarget = project.targets.test;
        project.targets.e2e = Object.assign(Object.assign({}, testTarget), { dependsOn: [`^build`], options: Object.assign(Object.assign({}, testTarget.options), { runInBand: true }), configurations: testTarget.configurations });
        // remove the jest build target
        delete project.targets.test;
        (0, devkit_1.updateProjectConfiguration)(host, options.projectName, project);
        return jestTask;
    });
}
function addLintingToApplication(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const lintTask = yield (0, linter_1.lintProjectGenerator)(tree, {
            linter: options.linter,
            project: options.projectName,
            tsConfigPaths: [
                (0, devkit_1.joinPathFragments)(options.projectRoot, 'tsconfig.app.json'),
            ],
            eslintFilePatterns: [`${options.projectRoot}/**/*.ts`],
            unitTestRunner: 'jest',
            skipFormat: true,
            setParserOptionsProject: false,
        });
        return lintTask;
    });
}
function e2eProjectGenerator(host, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const tasks = [];
        validatePlugin(host, schema.pluginName);
        const options = normalizeOptions(host, schema);
        addFiles(host, options);
        tasks.push(yield (0, generator_1.setupVerdaccio)(host, {
            skipFormat: true,
        }));
        tasks.push(yield addJest(host, options));
        if (options.linter !== linter_1.Linter.None) {
            tasks.push(yield addLintingToApplication(host, Object.assign({}, options)));
        }
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(host);
        }
        return (0, devkit_1.runTasksInSerial)(...tasks);
    });
}
exports.e2eProjectGenerator = e2eProjectGenerator;
exports.default = e2eProjectGenerator;
exports.e2eProjectSchematic = (0, devkit_1.convertNxGenerator)(e2eProjectGenerator);
